version: 2.1

aliases:
  - &docker
    - image: cimg/node:15.1
  - &restore_yarn_cache
    restore_cache:
      name: Restore yarn cache
      key: v1-node-{{ arch }}-{{ checksum "yarn.lock" }}-yarn
  - &restore_node_modules_cache
    restore_cache:
      name: Restore node_modules cache
      key: v1-node-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}-node_modules

orbs:
  node: circleci/node@4.1
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-ecs: circleci/aws-ecs@2.2.1

executors:
  ecr-docker-build:
    machine:
      docker_layer_caching: true

jobs:
  setup:
    docker: *docker
    steps:
      - checkout
      - run:
          name: NodeJS Version
          command: node --version
      - *restore_yarn_cache
      - run:
          name: Install Package
          command: yarn --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          name: Save yarn cache for future installs
          key: v1-node-{{ arch }}-{{ checksum "yarn.lock" }}-yarn
          paths:
            - ~/.cache/yarn
      - save_cache:
          name: Save node_modules cache
          key: v1-node-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}-node_modules
          paths:
            - node_modules

  lint:
    docker: *docker

    steps:
      - checkout
      - *restore_node_modules_cache
      - run: yarn lint
  
  test:
    docker: *docker

    steps:
      - checkout
      - *restore_node_modules_cache
      - run: yarn test

  build:
    docker: *docker

    steps:
      - checkout
      - *restore_node_modules_cache
      - run: yarn build

  docker_hub_build_push_image:
    docker: *docker
    
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run:
          name: Build and push Docker image to Docker Hub
          command: |
            echo 'export TAG=0.1.${CIRCLE_BUILD_NUM}' >> ${BASH_ENV}
            echo 'export IMAGE_NAME=${CIRCLE_PROJECT_REPONAME}' >> ${BASH_ENV}
            source ${BASH_ENV}
            docker build -t ${DOCKER_LOGIN}/${IMAGE_NAME} -t ${DOCKER_LOGIN}/${IMAGE_NAME}:${TAG}
            echo ${DOCKER_PWD} | docker login -u ${DOCKER_LOGIN} --password-stdin
            docker push ${DOCKER_LOGIN}/${IMAGE_NAME}



workflows:
  build-and-deploy:
    jobs:
      - setup
      - test:
          requires:
            - setup
      - lint:
          requires:
            - setup
      - build:
          requires:
            - test
            - lint
      - docker_hub_build_push_image:
          requires:
            - build
          filters:
            branches:
              only:
                - main
      - aws-ecr/build-and-push-image:
          context: AWS
          repo: ci-cd
          tag: "latest,${CIRCLE_BUILD_NUM}"
          path: .
          remote-docker-layer-caching: true
          requires:
            - build
          filters:
            branches:
              only:
                - main
      - aws-ecs/deploy-service-update:
          context: AWS
          family: ci-cd-task
          cluster-name: 'ci-cd'
          service-name: 'ci-cd-service'
          container-image-name-updates: "container=ci-cd-container,tag=${CIRCLE_BUILD_NUM}"
          requires:
            - aws-ecr/build-and-push-image
          filters:
            branches:
              only:
                - main
      