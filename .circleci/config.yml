version: 2.1

aliases:
  - &machine
    image: ubuntu-2004:202010-01
  - &docker
    - image: cimg/node:15.1
  - &restore_yarn_cache
    restore_cache:
      name: Restore yarn cache
      key: v2-node-{{ arch }}-{{ checksum "yarn.lock" }}-yarn
  - &restore_node_modules_cache
    restore_cache:
      name: Restore node_modules cache
      key: v2-node-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}-node_modules

defaults: &defaults
  docker: *docker

orbs:
  node: circleci/node@4.1
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-ecs: circleci/aws-ecs@2.2.1
  codecov: codecov/codecov@1.0.2

jobs:
  setup:
    docker: *docker
    steps:
      - checkout
      - run:
          name: NodeJS Version
          command: node --version
      - *restore_yarn_cache
      - run:
          name: Install Package
          command: yarn --frozen-lockfile --cache-folder ~/.cache/yarn
      - save_cache:
          name: Save yarn cache for future installs
          key: v2-node-{{ arch }}-{{ checksum "yarn.lock" }}-yarn
          paths:
            - ~/.cache/yarn
      - save_cache:
          name: Save node_modules cache
          key: v2-node-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}-node_modules
          paths:
            - node_modules

  lint:
    <<: *defaults
    steps:
      - checkout
      - *restore_node_modules_cache
      - run: yarn lint
  
  test:
    <<: *defaults
    steps:
      - checkout
      - *restore_node_modules_cache
      - run: 
          name: Run tests with JUnit as a reporter
          command: yarn test
          environment:
              JEST_JUNIT_OUTPUR_DIR: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
      - store_test_results:
          path: ./reports/junit/
      - codecov/upload:
          file: ./coverage

  build:
    <<: *defaults
    steps:
      - checkout
      - *restore_node_modules_cache
      - run: yarn build

  docker_hub_build_push_image:
    <<: *defaults
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: false
      - run:
          name: Build and push Docker image to Docker Hub
          command: |
            echo 'export TAG=${CIRCLE_SHA1}' >> ${BASH_ENV}
            echo 'export IMAGE_NAME=${CIRCLE_PROJECT_REPONAME}' >> ${BASH_ENV}
            source ${BASH_ENV}
            docker build -t $DOCKER_LOGIN/${IMAGE_NAME} -t $DOCKER_LOGIN/${IMAGE_NAME}:${TAG} .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push $DOCKER_LOGIN/${IMAGE_NAME}

  deploy:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Installing AWS CLI
          command: |
            sudo apt-get update
            sudo apt install python3-pip
            sudo pip3 install awscli --upgrade
      - *restore_node_modules_cache
      - run: yarn build
      - run: aws s3 sync build s3://$AWS_S3_BUCKET

workflows:
  build-and-deploy:
    jobs:
      - setup
      - test:
          context:
            - CODECOV
          requires:
            - setup
      - lint:
          requires:
            - setup
      - build:
          requires:
            - test
            - lint
      # - docker_hub_build_push_image:
      #     context: DOCKER
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only:
      #           - main
      # - deploy:
      #     context: 
      #       - AWS
      #       - S3
      #     requires:
      #       - build
      #     filters:
      #       branches:
      #         only:
      #           - main
      - aws-ecr/build-and-push-image:
          context: 
            - AWS
            - ECR
          repo: $ECR_REPO
          tag: "latest,${CIRCLE_SHA1}"
          path: .
          remote-docker-layer-caching: true
          requires:
            - build
          filters:
            branches:
              only:
                - main
      - aws-ecs/deploy-service-update:
          context: 
            - AWS
            - ECSa
          family: $ECS_FAMILY
          cluster-name:  $ECS_CLUSTER_NAME
          service-name: $ECS_SERVICE_NAME
          container-image-name-updates: "container=$ECS_CONTAINER,tag=${CIRCLE_SHA1}"
          requires:
            - aws-ecr/build-and-push-image
          filters:
            branches:
              only:
                - main
      